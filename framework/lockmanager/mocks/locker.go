// Code generated by MockGen. DO NOT EDIT.
// Source: ./locker.go

// Package locker_mocks is a generated GoMock package.
package locker_mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockLockManager is a mock of LockManager interface.
type MockLockManager struct {
	ctrl     *gomock.Controller
	recorder *MockLockManagerMockRecorder
}

// MockLockManagerMockRecorder is the mock recorder for MockLockManager.
type MockLockManagerMockRecorder struct {
	mock *MockLockManager
}

// NewMockLockManager creates a new mock instance.
func NewMockLockManager(ctrl *gomock.Controller) *MockLockManager {
	mock := &MockLockManager{ctrl: ctrl}
	mock.recorder = &MockLockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockManager) EXPECT() *MockLockManagerMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockLockManager) Acquire(ctx context.Context, key string, ttl time.Duration, token ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key, ttl}
	for _, a := range token {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Acquire", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Acquire indicates an expected call of Acquire.
func (mr *MockLockManagerMockRecorder) Acquire(ctx, key, ttl interface{}, token ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key, ttl}, token...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockLockManager)(nil).Acquire), varargs...)
}

// Release mocks base method.
func (m *MockLockManager) Release(ctx context.Context, key, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", ctx, key, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockLockManagerMockRecorder) Release(ctx, key, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockLockManager)(nil).Release), ctx, key, token)
}
