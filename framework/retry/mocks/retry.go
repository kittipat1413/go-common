// Code generated by MockGen. DO NOT EDIT.
// Source: ./retry.go

// Package retry_mocks is a generated GoMock package.
package retry_mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	retry "github.com/kittipat1413/go-common/framework/retry"
)

// MockRetrier is a mock of Retrier interface.
type MockRetrier struct {
	ctrl     *gomock.Controller
	recorder *MockRetrierMockRecorder
}

// MockRetrierMockRecorder is the mock recorder for MockRetrier.
type MockRetrierMockRecorder struct {
	mock *MockRetrier
}

// NewMockRetrier creates a new mock instance.
func NewMockRetrier(ctrl *gomock.Controller) *MockRetrier {
	mock := &MockRetrier{ctrl: ctrl}
	mock.recorder = &MockRetrierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetrier) EXPECT() *MockRetrierMockRecorder {
	return m.recorder
}

// ExecuteWithRetry mocks base method.
func (m *MockRetrier) ExecuteWithRetry(ctx context.Context, fn retry.RetryFunc, retryOn retry.RetryOnFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteWithRetry", ctx, fn, retryOn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteWithRetry indicates an expected call of ExecuteWithRetry.
func (mr *MockRetrierMockRecorder) ExecuteWithRetry(ctx, fn, retryOn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWithRetry", reflect.TypeOf((*MockRetrier)(nil).ExecuteWithRetry), ctx, fn, retryOn)
}
